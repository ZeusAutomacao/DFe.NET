//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
/********************************************************************************/
/* Projeto: Biblioteca ZeusMDFe                                                 */
/* Biblioteca C# para emissão de Manifesto Eletrônico Fiscal de Documentos      */
/* (https://mdfe-portal.sefaz.rs.gov.br/                                        */
/*                                                                              */
/* Direitos Autorais Reservados (c) 2014 Adenilton Batista da Silva             */
/*                                       Zeusdev Tecnologia LTDA ME             */
/*                                                                              */
/*  Você pode obter a última versão desse arquivo no GitHub                     */
/* localizado em https://github.com/adeniltonbs/Zeus.Net.NFe.NFCe               */
/*                                                                              */
/*                                                                              */
/*  Esta biblioteca é software livre; você pode redistribuí-la e/ou modificá-la */
/* sob os termos da Licença Pública Geral Menor do GNU conforme publicada pela  */
/* Free Software Foundation; tanto a versão 2.1 da Licença, ou (a seu critério) */
/* qualquer versão posterior.                                                   */
/*                                                                              */
/*  Esta biblioteca é distribuída na expectativa de que seja útil, porém, SEM   */
/* NENHUMA GARANTIA; nem mesmo a garantia implícita de COMERCIABILIDADE OU      */
/* ADEQUAÇÃO A UMA FINALIDADE ESPECÍFICA. Consulte a Licença Pública Geral Menor*/
/* do GNU para mais detalhes. (Arquivo LICENÇA.TXT ou LICENSE.TXT)              */
/*                                                                              */
/*  Você deve ter recebido uma cópia da Licença Pública Geral Menor do GNU junto*/
/* com esta biblioteca; se não, escreva para a Free Software Foundation, Inc.,  */
/* no endereço 59 Temple Street, Suite 330, Boston, MA 02111-1307 USA.          */
/* Você também pode obter uma copia da licença em:                              */
/* http://www.opensource.org/licenses/lgpl-license.php                          */
/*                                                                              */
/* Zeusdev Tecnologia LTDA ME - adenilton@zeusautomacao.com.br                  */
/* http://www.zeusautomacao.com.br/                                             */
/* Rua Comendador Francisco josé da Cunha, 111 - Itabaiana - SE - 49500-000     */
/********************************************************************************/

using System;
using System.IO;
using System.Net;
using System.Text;
using System.Xml;
using System.Xml.Serialization;
using SMDFe.Wsdl.Configuracao;

namespace SMDFe.Wsdl.Gerado.MDFeConsultaNaoEncerrados
{ // 
    // This source code was auto-generated by wsdl, Version=4.6.1055.0.
    // 


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
#if NET45
    [System.Web.Services.WebServiceBindingAttribute(Name = "MDFeConsNaoEncSoap12", Namespace ="http://www.portalfiscal.inf.br/mdfe/wsdl/MDFeConsNaoEnc")]
    public partial class MDFeConsNaoEnc : System.Web.Services.Protocols.SoapHttpClientProtocol {
#endif
#if NETSTANDARD2_0
        public partial class MDFeConsNaoEnc
    {
#endif

#if NET45
        private mdfeCabecMsg mdfeCabecMsgValueField;
#endif

#if NETSTANDARD2_0
        private SOAPEnvelope soapEnvelope;
        private XmlDocument xmlEnvelop;
        private WsdlConfiguracao configuracao;
        private HttpWebRequest request;
#endif

        private System.Threading.SendOrPostCallback mdfeConsNaoEncOperationCompleted;

        /// <remarks/>
        public MDFeConsNaoEnc(WsdlConfiguracao configuracao)
        {

#if NETSTANDARD2_0
            try
            {
                this.configuracao = configuracao;

                soapEnvelope = new SOAPEnvelope()
                {
                    head = new ResponseHead<mdfeCabecMsg>()
                    {
                        mdfeCabecMsg = new mdfeCabecMsg()
                        {
                            versaoDados = configuracao.Versao,
                            cUF = configuracao.CodigoIbgeEstado
                        }
                    }
                };

                request = (HttpWebRequest)WebRequest.Create(configuracao.Url);
                request.Headers.Add("soapAction", "http://www.portalfiscal.inf.br/mdfe/wsdl/MDFeConsNaoEnc/mdfeConsNaoEnc");
                request.ContentType = "text/xml;charset=utf-8";
                request.Accept = "text/xml";
                request.Method = "POST";
                request.UserAgent = "Mozilla/4.0(compatible; MSIE 5.01; Windows NT 5.0)";
                request.ClientCertificates.Add(configuracao.CertificadoDigital);
            }
            catch (Exception e)
            {
                Console.WriteLine("ERRO na criação da Requisição -> "+e);
                throw;
            }
            
           
#endif

#if NET45
            this.SoapVersion = System.Web.Services.Protocols.SoapProtocolVersion.Soap12;
            this.Url = configuracao.Url;
            this.mdfeCabecMsgValue = new mdfeCabecMsg
            {
                cUF = configuracao.CodigoIbgeEstado,
                versaoDados = configuracao.Versao
            };
            this.ClientCertificates.Add(configuracao.CertificadoDigital);
            Timeout = configuracao.TimeOut;
#endif
        }
#if NET45
        public mdfeCabecMsg mdfeCabecMsgValue
        {
            get { return this.mdfeCabecMsgValueField; }
            set { this.mdfeCabecMsgValueField = value; }
        }
#endif

#if NETSTANDARD2_0
        

        private static void InsertSoapEnvelopeIntoWebRequest(XmlDocument soapEnvelopeXml, HttpWebRequest webRequest)
        {
            try
            {
                using (Stream stream = webRequest.GetRequestStream())
                {
                    soapEnvelopeXml.Save(stream);
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("ERRO na inserção do envelope -> " + e);
                throw;
            }

        }
#endif



#if NET45
        /// <remarks/>
        public event mdfeConsNaoEncCompletedEventHandler mdfeConsNaoEncCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("mdfeCabecMsgValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.portalfiscal.inf.br/mdfe/wsdl/MDFeConsNaoEnc/mdfeConsNaoEnc", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute(Namespace ="http://www.portalfiscal.inf.br/mdfe/wsdl/MDFeConsNaoEnc")]
        public System.Xml.XmlNode mdfeConsNaoEnc([System.Xml.Serialization.XmlElementAttribute(Namespace ="http://www.portalfiscal.inf.br/mdfe/wsdl/MDFeConsNaoEnc")] System.Xml.XmlNode mdfeDadosMsg) {
            object[] results = this.Invoke("mdfeConsNaoEnc", new object[] {
                mdfeDadosMsg});
#endif
#if NETSTANDARD2_0
        public System.Xml.XmlNode mdfeConsNaoEnc(System.Xml.XmlNode mdfeDadosMsg) {
            
            try
            {
                soapEnvelope.body = new ResponseBody<XmlNode>()
                {
                    mdfeDadosMsg = mdfeDadosMsg
                };

                var soapserializer = new XmlSerializer(typeof(SOAPEnvelope));


                xmlEnvelop = new XmlDocument();

                using (StreamWriter arqStream = new StreamWriter("soap.xml"))
                {
                    using (XmlTextWriter soapwriter = new XmlTextWriter(arqStream))
                    {
                        soapserializer.Serialize(soapwriter, soapEnvelope);
                        soapwriter.Close();
                        xmlEnvelop.Load("soap.xml");
                    }
                }
            }
            catch (XmlException e)
            {
                Console.WriteLine("ERRO no xml do envelope -> " + e);
                throw;
            }

            string result;
            InsertSoapEnvelopeIntoWebRequest(xmlEnvelop, request);
            object[] results = null; // Chamada da requisição
            try
            {
                using (WebResponse response = request.GetResponse())
                {
                    using (StreamReader rd = new StreamReader(response.GetResponseStream()))
                    {
                        result = rd.ReadToEnd();
                        Console.WriteLine(result);
                    }
                }
                
            }
            catch (WebException e)
            {
                string message = new StreamReader(e.Response.GetResponseStream()).ReadToEnd();
                Console.WriteLine(message);
                throw;
            }
           
#endif
            return ((System.Xml.XmlNode)(results[0]));
        }
#if NET45
        /// <remarks/>
        public System.IAsyncResult BeginmdfeConsNaoEnc(System.Xml.XmlNode mdfeDadosMsg, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("mdfeConsNaoEnc", new object[] {
                mdfeDadosMsg}, callback, asyncState);
        }

        /// <remarks/>
        public System.Xml.XmlNode EndmdfeConsNaoEnc(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlNode)(results[0]));
        }

        /// <remarks/>
        public void mdfeConsNaoEncAsync(System.Xml.XmlNode mdfeDadosMsg) {
            this.mdfeConsNaoEncAsync(mdfeDadosMsg, null);
        }

        /// <remarks/>
        public void mdfeConsNaoEncAsync(System.Xml.XmlNode mdfeDadosMsg, object userState) {
            if ((this.mdfeConsNaoEncOperationCompleted == null)) {
                this.mdfeConsNaoEncOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmdfeConsNaoEncOperationCompleted);
            }

            this.InvokeAsync("mdfeConsNaoEnc", new object[] {
                mdfeDadosMsg}, this.mdfeConsNaoEncOperationCompleted, userState);

        }

        private void OnmdfeConsNaoEncOperationCompleted(object arg)
        {
            if ((this.mdfeConsNaoEncCompleted != null))
            {

                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs =
                    ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                this.mdfeConsNaoEncCompleted(this,
                    new mdfeConsNaoEncCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled,
                        invokeArgs.UserState));

            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
#endif

}

#if NET45
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.portalfiscal.inf.br/mdfe/wsdl/MDFeConsNaoEnc")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.portalfiscal.inf.br/mdfe/wsdl/MDFeConsNaoEnc", IsNullable = false)]
    public partial class mdfeCabecMsg : System.Web.Services.Protocols.SoapHeader
    {
    
        private string cUFField;
    
        private string versaoDadosField;
    
        private System.Xml.XmlAttribute[] anyAttrField;
    
        /// <remarks/>
        public string cUF {
            get {
                return this.cUFField;
            }
            set {
                this.cUFField = value;
            }
        }
    
        /// <remarks/>
        public string versaoDados {
            get {
                return this.versaoDadosField;
            }
            set {
                this.versaoDadosField = value;
            }
        }
    
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
#endif

#if NETSTANDARD2_0
    [XmlType(Namespace = "http://www.w3.org/2003/05/soap-envelope")]
    [XmlRoot(ElementName = "Envelope", Namespace = "http://www.w3.org/2003/05/soap-envelope")]
    public class SOAPEnvelope
    {
        [XmlAttribute(AttributeName = "soap12", Namespace = "http://www.w3.org/2003/05/soap-envelope")]
        public string soapenva { get; set; }

        [XmlAttribute(AttributeName = "xsi", Namespace = "http://www.w3.org/2001/XMLSchema-instance")]
        public string xsi { get; set; }

        [XmlAttribute(AttributeName = "xsd", Namespace = "http://www.w3.org/2001/XMLSchema")]
        public string xsd { get; set; }

        [XmlElement(ElementName = "Header", Namespace = "http://www.w3.org/2003/05/soap-envelope")]
        public ResponseHead<mdfeCabecMsg> head { get; set; }

        [XmlElement(ElementName = "Body", Namespace = "http://www.w3.org/2003/05/soap-envelope")]
        public ResponseBody<XmlNode> body { get; set; }

        [XmlNamespaceDeclarations]
        public XmlSerializerNamespaces xmlns = new XmlSerializerNamespaces();
        public SOAPEnvelope()
        {
            xmlns.Add("soap12", "http://www.w3.org/2003/05/soap-envelope");
        }
    }

    [XmlRoot(ElementName = "Header", Namespace = "http://www.w3.org/2003/05/soap-envelope")]
    public class ResponseHead<T>
    {
        [XmlElement(Namespace = "http://www.portalfiscal.inf.br/mdfe/wsdl/MDFeConsNaoEnc")]
        public T mdfeCabecMsg { get; set; }
    }

    [XmlRoot(ElementName = "Body", Namespace = "http://www.w3.org/2003/05/soap-envelope")]
    public class ResponseBody<T>
    {
        [XmlElement(Namespace = "http://www.portalfiscal.inf.br/mdfe/wsdl/MDFeConsNaoEnc")]
        public T mdfeDadosMsg { get; set; }
    }

    public class mdfeCabecMsg
    {

        private string _cUFField;
        private string _versaoDadosField;

        /// <remarks/>
        public string cUF
        {
            get { return this._cUFField; }
            set { this._cUFField = value; }
        }

        /// <remarks/>
        public string versaoDados
        {
            get { return this._versaoDadosField; }
            set { this._versaoDadosField = value; }
        }
    }

#endif
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void mdfeConsNaoEncCompletedEventHandler(object sender, mdfeConsNaoEncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class mdfeConsNaoEncCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal mdfeConsNaoEncCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
            this.results = results;
            }
    
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }

}